using System;
using System.Collections.Generic;

class Program
{
    static void Dfs(Dictionary<int, List<int>> graph, int node, HashSet<int> visited, List<int> component)
    {
        visited.Add(node);
        component.Add(node);
        
        foreach (var neighbor in graph[node])
        {
            if (!visited.Contains(neighbor))
            {
                Dfs(graph, neighbor, visited, component);
            }
        }
    }

    static List<List<int>> FindConnectedComponents(Dictionary<int, List<int>> graph)
    {
        var visited = new HashSet<int>();
        var components = new List<List<int>>();

        foreach (var node in graph.Keys)
        {
            if (!visited.Contains(node))
            {
                var component = new List<int>();
                Dfs(graph, node, visited, component);
                components.Add(component);
            }
        }

        return components;
    }

    static void Main()
    {
        var graph = new Dictionary<int, List<int>>()
        {
            { 1, new List<int> { 2, 3 } },
            { 2, new List<int> { 1, 3 } },
            { 3, new List<int> { 1, 2 } },
            { 4, new List<int> { 5 } },
            { 5, new List<int> { 4 } },
            { 6, new List<int> { } }
        };

        var components = FindConnectedComponents(graph);

        Console.WriteLine("Компоненты связности:");
        int i = 1;
        foreach (var component in components)
        {
            Console.WriteLine($"Компонента {i++}: {string.Join(", ", component)}");
        }
    }
}
